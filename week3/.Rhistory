summary(model.c)
model.c.test <- t.test(morekids ~ samesex, fertility)
model.c.test
# d
tsls1 <- ivreg(log(morekids) ~ log(weeksm1) | samesex)
# d
tsls1 <- ivreg(morekids ~ log(weeksm1) | samesex)
# d
tsls1 <- ivreg(morekids ~ weeksm1 | samesex)
summary(tsls1)
# d
tsls1 <- ivreg(morekids ~ weeksm1 | samesex)
summary(tsls1)
# d
tsls1 <- ivreg(morekids ~ weeksm1 | samesex)
summary(tsls1)
coeftest(tsls1, vcov=vcovHC, type="HC1")
tsls.ctest <- coeftest(tsls1, vcov=vcovHC, type="HC1")
tsls.ctest <- coeftest(tsls1, vcov=vcovHC, type="HC1")
tsls.ctest
coeftest(tsls1, vcov = vcovHC, type="HC1")
library(readxl)
cig_ch12 <- read_excel("/Users/eunsong/Documents/Applied Econ/data/cig_ch12.xlsx")
View(cig_ch12)
######################## some preliminary work
# get sales tax:
cig_ch12$salestax <- cig_ch12$taxs - cig_ch12$tax
cig_ch12$rsalestax <- with(cig_ch12, salestax/cpi)
cig_ch12$rcigprice <- with(cig_ch12, avgprs/cpi)
cig_ch12$rcigspecifictax <- with(cig_ch12, tax/cpi)
cig_ch12$rPerCapitaIncome <- with(cig_ch12, income/pop/cpi)
c1995 <- subset(cig_ch12, year == "1995")
########################  replicate the TSLS procedure in equations 12.9 and 12.10
attach(c1995)
stage1 <- lm(log(rcigprice)~rsalestax)
summary(stage1)
stage2 <- lm(log(packpc)~stage1$fitted.values)
summary(stage2)
# Do the same with ivreg in one step! To use ivreg(), we write out our main (usually called "structural") regression model, then we add a vertical bar (|). After the vertical bar, we include our instruments AND any exogenous or control variables. The only thing excluded to the right of the vertical bar is (are) the endogenous regressor(s).
tsls1 <- ivreg(log(packpc) ~ log(rcigprice) | rsalestax)
summary(tsls1)
# but to get robust standard errors after ivreg, we need to use coeftest()
coeftest(tsls1, vcov = vcovHC, type = "HC1")
######################## replicate 12.15
tsls2 <- ivreg(log(packpc) ~ log(rcigprice) + log(rPerCapitaIncome) | rsalestax + log(rPerCapitaIncome))
summary(tsls1)
summary(stage1)
summary(tsls1)
summary(model.c)
# d
tsls1 <- ivreg(morekids ~ weeksm1 | samesex)
summary(tsls1)
# d
cor(morekids, samesex)
# 0.07
model.d <- resid(model.c)
cor(model.d, samesex)
# 0.07
model.d.reg <- glm(morekids ~ samesex, data=fertility, family="binomial")
model.d.res = resid(model.d.reg)
cor(model.d.res, samesex)
# f
tsls1 <- ivreg(morekids ~ weeksm1 | samesex)
summary(tsls1)
coeftest(tsls1, vcov = vcovHC, type="HC1")
# f
tsls1 <- ivreg(weeksm1 ~ morekids | samesex)
summary(tsls1)
# g
model.g <- lm(weeksm1 ~ morekids+agem1+black+hispan+othrace, data=fertility)
summary(model.g)
tsls2 <- tsls(weeksm1 ~ morekids+agem1+black+hispan+othrace | samesex+agem1+black+hispan+othrace)
tsls2 <- ivreg(weeksm1 ~ morekids+agem1+black+hispan+othrace | samesex+agem1+black+hispan+othrace)
summary(tsls2)
# g
model.g <- lm(morekids ~ weeksm1+agem1+black+hispan+othrace, data=fertility)
summary(model.g)
tsls2 <- ivreg(morekids ~ weeksm1+agem1+black+hispan+othrace | samesex+agem1+black+hispan+othrace)
"Hello World!"
5+5
plot(1:10)
5+5
for (x in 1:10){}
for (x in 1:10){}
for (x in 1:10){
print(x)
}
name <- "John"
age <- 40
nname
name
age
print(name)
text <= "awesome"
text <- "awesome"
paste("R is", text)
text1 <- "R is"
text2 <- "awesome"
paste(text1, text2)
num1 <- 5
num2 <- 10
num1 + num2
var1 <- var2 <- var3 <- "Orange"
var1
var2
text1
TRUE <- "Jogn"
install.packages("tidyverse")
library(tidyverse)
setwd("/Users/eunsong/Documents/WorkSpace/ROCS_R/week3")
df <- read_csv("all_games_cleaned.csv")
View(df)
# In essence, this code calculates how many games there are for each platform, orders the platforms by this count, and then prints the result.
df_platform_summary <- df %>% group_by(platform) %>%
summarise(n=n()) %>%
arrange(n %>% desc) %>%
print(n=Inf)
# challenge 1
# Now, let’s visualise this data using ggplot. Create a visualisation that is equivalent to the one below. Stretch Challenge: I have ordered the columns by ‘n’ – try to do this yourself too.
ggplot(df_platform_summary,
aes(x = n, y= reorder(platform, n))) +
geom_histogram(fill="#58ded0", stat="identity") +
labs(title="Number of Games Per Platform", x="Number of Games", y="Platform")
# challenge 3
# Produce appropriate statistics to understand the spread and central tendency of the number of games per year within our dataset.
install.packages("lubridate")
install.packages("lubridate")
library(lubridate, warn.conflicts = FALSE)
df$release_year <- df$release_date %>%  str_sub(start=-4)
View(df)
View(df)
df$release_year <- df$release_date %>%  str_sub(start=-4)
library(tidyverse)
df$release_year <- df$release_date %>%  str_sub(start=-4)
View(df)
df_year_summary <- df %>% group_by(release_year) %>%
summarise(
n=n()) %>%
arrange(n %>% desc) %>%
print(n=Inf)
mean_num_games <- mean(df_year_summary$n)
median_num_games <- median(df_year_summary$n)
standard_num_games <- sd(df_year_summary$n)
summary(df_year_summary)
cat("Standard Deviation of games per year:", standard_num_games,"\n")
# challenge 4
# Produce a visualisation of the total number of games per year. Stretch Challenge: integrate some kind of visualisation of central tendency within this plot. For example, you could try to replicate the bar plot below, which integrates a dashed line showing mean games per year:
#ggplot(df_year_summary,
#   aes(x = release_year,
#        y = n)) +
#geom_bar(fill="#58ded0", stat="identity")+
# geom_hline(yintercept=mean_num_games, linetype="dashed") +
#  labs(title="Number of Games Per Year", x="Year", y="Number of Games")
ggplot(df_year_summary) +
geom_bar(mapping=aes(y=n, x=release_year),fill="#58ded0", stat="identity")+
geom_hline(yintercept=mean_num_games, linetype="dashed") +
labs(title="Number of Games Per Year", x="Year", y="Number of Games")+
theme_minimal()
# challenge 5
# Reproduce a similar descriptive graphic to the one below for the relationship between (a) time x critic score, (b) time x use score, and (c) user score x critic score.
df$timestamp <- df$release_date %>% mdy
View(df)
class(df$timestamp[1])
print(df$timestamp[1])
print(as.Date(df$timestamp[1], format="%d/%m/%Y"), "%Y")
tmp <- df$timestamp[1] %>% print
print(as.Date(tmp, format="%d/%m/%Y"), "%Y")
year(tmp) %>% print
month(tmp) %>% print
class(month(tmp))
ggplot(df, aes(x=timestamp, y=meta_score, fill=meta_score)) +
geom_tile();
ggplot(df, aes(x=timestamp, y=meta_score, fill=meta_score)) +
geom_tile() +
labs(title="Metascore by Timestamp", x="Date", y="Metascore")
df$meta_score %>% max
ggplot(df, aes(x=year(timestamp), y=meta_score, fill=meta_score)) +
geom_tile() +
labs(title="Metascore by Timestamp", x="Date", y="Metascore")
ggplot(df, aes(x=as.numeric(timestamp), y=meta_score, fill=meta_score)) +
geom_tile() +
labs(title="Metascore by Timestamp", x="Date", y="Metascore")
year
ggplot(df, aes(x=year(timestamp), y=meta_score, fill=meta_score)) +
geom_tile() +
labs(title="Metascore by Timestamp", x="Date", y="Metascore")
ggplot(df, aes(x=year(timestamp), y=meta_score)) +
geom_tile() +
labs(title="Metascore by Timestamp", x="Date", y="Metascore")
ggplot(df, aes(x=year(timestamp), y=meta_score, fill=meta_score)) +
geom_tile() +
labs(title="Metascore by Timestamp", x="Date", y="Metascore")
ggplot(df, aes(x=year(timestamp), y=meta_score, fill=meta_score)) +
geom_tile() +
theme_bw() +
theme(panel.grid=element_blank()) +
labs(title="Metascore by Timestamp", x="Date", y="Metascore")
ggplot(df, aes(x=year(timestamp), y=meta_score, fill=meta_score)) +
geom_tile() +
theme(panel.grid=element_blank()) +
labs(title="Metascore by Timestamp", x="Date", y="Metascore")
ggplot(df, aes(x=year(timestamp), y=meta_score, fill=meta_score)) +
geom_tile() +
theme_bw() +
labs(title="Metascore by Timestamp", x="Date", y="Metascore")
ggplot(df, aes(x=year(timestamp), y=meta_score, fill=meta_score)) +
geom_tile() +
labs(title="Metascore by Timestamp", x="Date", y="Metascore")
df_meta_score <- df %>% release_date %>% mdy %>%
group_by(year(release_date)) %>%
summarise(count = n())
df_meta_score <- df %>% release_date %>% mdy
df_meta_score <- df$release_date %>% mdy %>%
group_by(year(release_date)) %>%
summarise(count = n())
df_meta_score <- df %>%
group_by(release_year) %>%
summarise(count = n())
View(df_meta_score)
df_meta_score <- df %>%
select(release_year, meta_score)
View(df_meta_score)
group_by(release_year) %>%
summarise(count = n(release_year))
group_by(release_year) %>%
summarise(count = n(release_year))
group_by(release_year) %>%
summarise(count = release_year())
df_meta_score <- df %>%
group_by(release_year) %>%
summarise(n = n())
View(df_meta_score)
class(df$release_year[1])
df <- read_csv("all_games_cleaned.csv")
View(df)
# challenge 5
# Reproduce a similar descriptive graphic to the one below for the relationship between (a) time x critic score, (b) time x use score, and (c) user score x critic score.
df$timestamp <- df$release_date %>% mdy
View(df)
class(df$timestamp[1])
class(year(df$timestamp[1]))
# challenge 5
# Reproduce a similar descriptive graphic to the one below for the relationship between (a) time x critic score, (b) time x use score, and (c) user score x critic score.
df$release_year <- df$release_date %>% mdy %>% year()
View(df)
df_meta_score <- df %>%
group_by(release_year) %>%
summarise(n = n()) %>%
ungroup()
View(df_meta_score)
df_meta_score <- df %>%
select(release_year, meta_score)
View(df_meta_score)
df_meta_score <- df %>%
select(release_year, meta_score) %>%
group_by(release_year) %>%
summarise(n = n()) %>%
ungroup()
View(df_meta_score)
df_meta_score <- df %>%
group_by(release_year, meta_score) %>%
summarise(count = n())
df_meta_score <- df %>%
group_by(release_year, meta_score) %>%
summarise(count = n())
df_meta_score <- df %>%
group_by(release_year, meta_score)
View(df_meta_score)
df_meta_score <- df %>%
select(release_year, meta_score) %>%
group_by(release_year, meta_score)
View(df_meta_score)
df_meta_score <- df %>%
select(release_year, meta_score) %>%
group_by(release_year, meta_score) %>%
summarise(count = n(meta_score))
df_meta_score <- df %>%
select(release_year, meta_score) %>%
group_by(release_year, meta_score) %>%
summarise(count = count(meta_score))
df_meta_score <- df %>%
select(release_year, meta_score) %>%
group_by(release_year, meta_score) %>%
mutate(count = count(meta_score))
df_meta_score <- df %>%
select(release_year, meta_score) %>%
group_by(release_year, meta_score) %>%
mutate(count = n(meta_score))
df_meta_score <- df %>%
select(release_year, meta_score) %>%
group_by(release_year, meta_score) %>%
mutate(count = n())
View(df_meta_score)
ggplot(df_meta_score, aes(x=release_year, y=meta_score, fill=count)) +
geom_tile() +
labs(title="Metascore by Timestamp", x="Date", y="Metascore")
ggplot(df, aes(x = timestamp,y=meta_score)) + geom_bin_2d() + labs(title = "Number of Games Per Platform", x = "Number of Games", y = "Year") + labs(title = "Metascore by timestamp", x = "Date", y = "Critic score")
# challenge 4
# Produce a visualisation of the total number of games per year. Stretch Challenge: integrate some kind of visualisation of central tendency within this plot. For example, you could try to replicate the bar plot below, which integrates a dashed line showing mean games per year:
#ggplot(df_year_summary,
#   aes(x = release_year,
#        y = n)) +
#geom_bar(fill="#58ded0", stat="identity")+
# geom_hline(yintercept=mean_num_games, linetype="dashed") +
#  labs(title="Number of Games Per Year", x="Year", y="Number of Games")
ggplot(df_year_summary) +
geom_bar(mapping=aes(y=n, x=release_year),fill="#58ded0", stat="identity")+
geom_hline(yintercept=mean_num_games, linetype="dashed") +
geom_bin_2d() +
labs(title="Number of Games Per Year", x="Year", y="Number of Games")+
theme_minimal()
# challenge 4
# Produce a visualisation of the total number of games per year. Stretch Challenge: integrate some kind of visualisation of central tendency within this plot. For example, you could try to replicate the bar plot below, which integrates a dashed line showing mean games per year:
#ggplot(df_year_summary,
#   aes(x = release_year,
#        y = n)) +
#geom_bar(fill="#58ded0", stat="identity")+
# geom_hline(yintercept=mean_num_games, linetype="dashed") +
#  labs(title="Number of Games Per Year", x="Year", y="Number of Games")
ggplot(df_year_summary) +
geom_bar(mapping=aes(y=n, x=release_year),fill="#58ded0", stat="identity")+
geom_hline(yintercept=mean_num_games, linetype="dashed") +
labs(title="Number of Games Per Year", x="Year", y="Number of Games")+
theme_minimal()
# challenge 5
# Reproduce a similar descriptive graphic to the one below for the relationship between (a) time x critic score, (b) time x use score, and (c) user score x critic score.
df$timestamp <- df$release_date %>% mdy
View(df)
ggplot(df, aes(x = timestamp, y=meta_score)) +
geom_bin_2d() +
labs(title = "Number of Games Per Platform", x = "Number of Games", y = "Year") +
labs(title = "Metascore by timestamp", x = "Date", y = "Critic score")
ggplot(df, aes(x = timestamp, y=meta_score)) +
geom_bin_2d() +
labs(title = "Metascore by timestamp", x = "Date", y = "Critic score")
help(geom_bin_2d())
help geom_bin_2d()
geom_bin_2d()?
help("geom_bin_2d")
help(geom_bin_2d)
# (b) time x user score
ggplot(df, aes(x = timestamp, y=user_score)) +
geom_bin_2d() +
labs(title = "Metascore by timestamp", x = "Date", y = "User score")
View(df)
# (b) time x user score
ggplot(df, aes(x = timestamp, y=user_review)) +
geom_bin_2d() +
labs(title = "Userscore by timestamp", x = "Date", y = "User score")
# (c) user score x critic score
ggplot(df, aes(x = meta_score, y=user_review)) +
geom_bin_2d() +
labs(title = "Metascore by userscore", x = "Critic score", y = "User score")
# correlation between time and critic scores
cor(df$meta_score, df$timestamp %>% as.numeric, methods="spearman")
# correlation between time and critic scores
cor(df$meta_score, df$timestamp %>% as.numeric, method="spearman")
cor.test(df$meta_score, df$timestamp)
cor.test(df$meta_score, df$timestamp %>% as.numeric, method="spearman")
cor.test(df$meta_score, df$timestamp %>% as.numeric, method="spearman", exact=FALSE)
cor.test(df$meta_score, df$timestamp %>% as.numeric,
alternative="two.sided",
method="spearman", exact=FALSE)
plot(meta_score, timestamp)
plot(meta_score, timestamp)
plot(df$meta_score, df$timestamp)
# correlation between time and critic scores
cor(df$meta_score, df$timestamp %>% as.numeric, method="spearman")
# challenge 7
# 1. Are video games becoming more critically acclaimed over time?
# 2. Are video games becoming more well-received by their players over time?
cor.test(df$user_review, df$timestamp %>% as.numeric,
alternative = "greater",
method="pearson",
exact=FALSE)
# challenge 7
# 1. Are video games becoming more critically acclaimed over time?
# 2. Are video games becoming more well-received by their players over time?
cor.test(df$user_review, df$timestamp %>% as.numeric,
alternative = "greater",
method="spearman",
exact=FALSE)
# challenge 7
# 1. Are video games becoming more critically acclaimed over time?
# 2. Are video games becoming more well-received by their players over time?
cor.test(df$user_review, df$timestamp %>% as.numeric,
method="spearman",
exact=FALSE)
# challenge 6
# Use ?cor.test() to look at the help for R’s native correlation test function, and use it to run Spearman’s rank correlation over your data. Attempt to interpret the p-value obtained. Make sure to use `method=”spearman”` in order to use the correct test Hint: If you do not come from a scientific background, you may need to Google the idea of the ‘scientific notation for numbers’
cor.test(df$meta_score, df$timestamp %>% as.numeric,
method="spearman",
exact=FALSE)
# 3. Is agreement between critics and players becoming more substantial over time?
cor.test(df$meta_score, df$user_review,
method="spearman",
exact=FALSE)
help(cor.test)
# (a) time x critic score
ggplot(df, aes(x = timestamp, y=meta_score)) +
geom_bin_2d() +
labs(title = "Metascore by timestamp", x = "Date", y = "Critic score")
# challenge 4
# Produce a visualisation of the total number of games per year. Stretch Challenge: integrate some kind of visualisation of central tendency within this plot. For example, you could try to replicate the bar plot below, which integrates a dashed line showing mean games per year:
#ggplot(df_year_summary,
#   aes(x = release_year,
#        y = n)) +
#geom_bar(fill="#58ded0", stat="identity")+
# geom_hline(yintercept=mean_num_games, linetype="dashed") +
#  labs(title="Number of Games Per Year", x="Year", y="Number of Games")
ggplot(df_year_summary) +
geom_bar(mapping=aes(y=n, x=release_year),fill="#58ded0", stat="identity")+
geom_hline(yintercept=mean_num_games, linetype="dashed") +
labs(title="Number of Games Per Year", x="Year", y="Number of Games")+
theme_minimal()
# challenge 4
# Produce a visualisation of the total number of games per year. Stretch Challenge: integrate some kind of visualisation of central tendency within this plot. For example, you could try to replicate the bar plot below, which integrates a dashed line showing mean games per year:
#ggplot(df_year_summary,
#   aes(x = release_year,
#        y = n)) +
#geom_bar(fill="#58ded0", stat="identity")+
# geom_hline(yintercept=mean_num_games, linetype="dashed") +
#  labs(title="Number of Games Per Year", x="Year", y="Number of Games")
ggplot(df_year_summary) +
geom_bar(mapping=aes(y=n, x=release_year),fill="#58ded0", stat="identity")+
geom_hline(yintercept=mean_num_games, linetype="dashed") +
geom_col() +
labs(title="Number of Games Per Year", x="Year", y="Number of Games")+
theme_minimal()
# challenge 4
# Produce a visualisation of the total number of games per year. Stretch Challenge: integrate some kind of visualisation of central tendency within this plot. For example, you could try to replicate the bar plot below, which integrates a dashed line showing mean games per year:
#ggplot(df_year_summary,
#   aes(x = release_year,
#        y = n)) +
#geom_bar(fill="#58ded0", stat="identity")+
# geom_hline(yintercept=mean_num_games, linetype="dashed") +
#  labs(title="Number of Games Per Year", x="Year", y="Number of Games")
ggplot(df_year_summary, aes(y=n, x=release_year)) +
geom_col(fill="#58ded0", stat="identity")+
geom_hline(yintercept=mean_num_games, linetype="dashed") +
labs(title="Number of Games Per Year", x="Year", y="Number of Games")+
theme_minimal()
ggplot(df_year_summary, aes(y=n, x=release_year)) +
geom_col(fill="#58ded0")+
geom_hline(yintercept=mean_num_games, linetype="dashed") +
labs(title="Number of Games Per Year", x="Year", y="Number of Games")+
theme_minimal()
# challenge 4
# Produce a visualisation of the total number of games per year. Stretch Challenge: integrate some kind of visualisation of central tendency within this plot. For example, you could try to replicate the bar plot below, which integrates a dashed line showing mean games per year:
#ggplot(df_year_summary,
#   aes(x = release_year,
#        y = n)) +
#geom_bar(fill="#58ded0", stat="identity")+
# geom_hline(yintercept=mean_num_games, linetype="dashed") +
#  labs(title="Number of Games Per Year", x="Year", y="Number of Games")
ggplot(df_year_summary, aes(x=release_year, y=n)) +
geom_col()+
geom_hline(yintercept=mean_num_games, linetype="dashed") +
labs(title="Number of Games Per Year", x="Year", y="Number of Games")+
theme_minimal()
# challenge 4
# Produce a visualisation of the total number of games per year. Stretch Challenge: integrate some kind of visualisation of central tendency within this plot. For example, you could try to replicate the bar plot below, which integrates a dashed line showing mean games per year:
#ggplot(df_year_summary,
#   aes(x = release_year,
#        y = n)) +
#geom_bar(fill="#58ded0", stat="identity")+
# geom_hline(yintercept=mean_num_games, linetype="dashed") +
#  labs(title="Number of Games Per Year", x="Year", y="Number of Games")
ggplot(df_year_summary, aes(x=release_year, y=n)) +
geom_col(fill="#58ded0")+
geom_hline(yintercept=mean_num_games, linetype="dashed") +
labs(title="Number of Games Per Year", x="Year", y="Number of Games")+
theme_minimal()
# challenge 4
# Produce a visualisation of the total number of games per year. Stretch Challenge: integrate some kind of visualisation of central tendency within this plot. For example, you could try to replicate the bar plot below, which integrates a dashed line showing mean games per year:
#ggplot(df_year_summary,
#   aes(x = release_year,
#        y = n)) +
#geom_bar(fill="#58ded0", stat="identity")+
# geom_hline(yintercept=mean_num_games, linetype="dashed") +
#  labs(title="Number of Games Per Year", x="Year", y="Number of Games")
ggplot(df_year_summary, aes(x=release_year, y=n)) +
geom_col(fill="#58ded0")+
geom_hline(yintercept=mean_num_games, linetype="dashed") +
labs(title="Number of Games Per Year", x="Year", y="Number of Games")
# challenge 4
# Produce a visualisation of the total number of games per year. Stretch Challenge: integrate some kind of visualisation of central tendency within this plot. For example, you could try to replicate the bar plot below, which integrates a dashed line showing mean games per year:
ggplot(df_year_summary, aes(x=release_year, y=n)) +
geom_col(fill="#58ded0")+
labs(title="Number of Games Per Year", x="Year", y="Number of Games") +
geom_hline(yintercept=mean_num_games, linetype="dashed") +
theme_minimal()
# challenge 4
# Produce a visualisation of the total number of games per year. Stretch Challenge: integrate some kind of visualisation of central tendency within this plot. For example, you could try to replicate the bar plot below, which integrates a dashed line showing mean games per year:
ggplot(df_year_summary, aes(x=release_year, y=n)) +
geom_col()+
labs(title="Number of Games Per Year", x="Year", y="Number of Games") +
geom_hline(yintercept=mean_num_games, linetype="dashed") +
theme_minimal()
class(df_year_summary$release_year[1])
# challenge 4
# Produce a visualisation of the total number of games per year. Stretch Challenge: integrate some kind of visualisation of central tendency within this plot. For example, you could try to replicate the bar plot below, which integrates a dashed line showing mean games per year:
ggplot(df_year_summary, aes(x=release_year %>% as.numeric, y=n)) +
geom_col(fill="#58ded0")+
labs(title="Number of Games Per Year", x="Year", y="Number of Games") +
geom_hline(yintercept=mean_num_games, linetype="dashed")
# challenge 6
# Use ?cor.test() to look at the help for R’s native correlation test function, and use it to run Spearman’s rank correlation over your data. Attempt to interpret the p-value obtained. Make sure to use `method=”spearman”` in order to use the correct test Hint: If you do not come from a scientific background, you may need to Google the idea of the ‘scientific notation for numbers’
cor.test(df$meta_score, df$timestamp %>% as.numeric,
method="spearman",
exact=FALSE)
plot(df$meta_score, df$timestamp)
